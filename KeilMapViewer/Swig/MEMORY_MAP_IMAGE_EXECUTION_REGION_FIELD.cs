//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          KeilMapLibPINVOKE.delete_MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string name {
    set {
      KeilMapLibPINVOKE.MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD_name_set(swigCPtr, value);
      if (KeilMapLibPINVOKE.SWIGPendingException.Pending) throw KeilMapLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = KeilMapLibPINVOKE.MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD_name_get(swigCPtr);
      if (KeilMapLibPINVOKE.SWIGPendingException.Pending) throw KeilMapLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string data {
    set {
      KeilMapLibPINVOKE.MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD_data_set(swigCPtr, value);
      if (KeilMapLibPINVOKE.SWIGPendingException.Pending) throw KeilMapLibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = KeilMapLibPINVOKE.MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD_data_get(swigCPtr);
      if (KeilMapLibPINVOKE.SWIGPendingException.Pending) throw KeilMapLibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MEMORY_MAP_IMAGE_OBJECT_VECTOR fields {
    set {
      KeilMapLibPINVOKE.MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD_fields_set(swigCPtr, MEMORY_MAP_IMAGE_OBJECT_VECTOR.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = KeilMapLibPINVOKE.MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD_fields_get(swigCPtr);
      MEMORY_MAP_IMAGE_OBJECT_VECTOR ret = (cPtr == global::System.IntPtr.Zero) ? null : new MEMORY_MAP_IMAGE_OBJECT_VECTOR(cPtr, false);
      return ret;
    } 
  }

  public MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD() : this(KeilMapLibPINVOKE.new_MEMORY_MAP_IMAGE_EXECUTION_REGION_FIELD(), true) {
  }

}
