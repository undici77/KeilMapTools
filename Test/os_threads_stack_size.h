#ifndef _KEIL_RTX_STACK_SIZE_H
#define _KEIL_RTX_STACK_SIZE_H

/// @brief Generated by KeilRtxStackSize v1.0.0
///
/// This solution can't trace:
/// - function pointer
/// - recursive functions
///
/// Stack oversizing is user demaned
/// For example:
///     static const osThreadAttr_t Generic_Thread_Attributes = { .priority = osPriorityNormal, .stack_size = (GENERIC_TASK_STACK_SIZE + 100) };
///     to add 100 extra bytes to manage recursion or function pointer

#if defined(STM32G0)
#define SYSTEM_ARCHITECTURE_STACK_USAGE                                  (64)
#elif defined(STM32F1)
#define SYSTEM_ARCHITECTURE_STACK_USAGE                                  (0)
#elif defined(STM32F4)
#define SYSTEM_ARCHITECTURE_STACK_USAGE                                  (128)
#else
#error Unable to recognise architecture: contact Alessandro Barbieri and ask an improvement!
#define SYSTEM_ARCHITECTURE_STACK_USAGE                                  (0)
#endif

/******************************************************************************/

// terminal_task => execute => parameter => write_parameter_by_field => atof
#define TERMINAL_TASK_STACK_SIZE                                         (SYSTEM_ARCHITECTURE_STACK_USAGE + 1216)

// adc12_task => osThreadFlagsWait
#define ADC12_TASK_STACK_SIZE                                            (SYSTEM_ARCHITECTURE_STACK_USAGE + 320)

// evse_task => socket_init_max_current => socket_set_current => _trace_log_append => log_append => queue_push => osThreadFlagsSet => osRtxPostProcess => osRtxErrorNotify => __ARM_common_switch8
#define EVSE_TASK_STACK_SIZE                                             (SYSTEM_ARCHITECTURE_STACK_USAGE + 576)

// inputs_task => osDelay
#define INPUTS_TASK_STACK_SIZE                                           (SYSTEM_ARCHITECTURE_STACK_USAGE + 320)

// kernel_task => application_init => parameters_module_init => set_parameters_to_default => ext_flash_read => spi_device_rx => HAL_SPI_Receive_DMA => HAL_SPI_TransmitReceive_DMA => HAL_DMA_Start_IT => DMA_SetConfig
#define KERNEL_TASK_STACK_SIZE                                           (SYSTEM_ARCHITECTURE_STACK_USAGE + 896)

// leds_task => osKernelGetTickCount
#define LEDS_TASK_STACK_SIZE                                             (SYSTEM_ARCHITECTURE_STACK_USAGE + 320)

// log_task => ext_flash_program => write_disable => spi_device_rx => HAL_SPI_Receive_DMA => HAL_SPI_TransmitReceive_DMA => HAL_DMA_Start_IT => DMA_SetConfig
#define LOG_TASK_STACK_SIZE                                              (SYSTEM_ARCHITECTURE_STACK_USAGE + 576)

// socket_charge_task => pwm_charge => pwm_charge_stop => socket_control_pilot => __aeabi_dsub => __aeabi_dadd => _double_epilogue => __aeabi_llsr
#define SOCKET_CHARGE_TASK_STACK_SIZE                                    (SYSTEM_ARCHITECTURE_STACK_USAGE + 512)

// socket_control_pilot_create_task => osThreadNew
#define SOCKET_CONTROL_PILOT_CREATE_TASK_STACK_SIZE                      (SYSTEM_ARCHITECTURE_STACK_USAGE + 320)

// socket_control_pilot_task => wait_control_pilot_disconnected => socket_control_pilot => __aeabi_dsub => __aeabi_dadd => _double_epilogue => __aeabi_llsr
#define SOCKET_CONTROL_PILOT_TASK_STACK_SIZE                             (SYSTEM_ARCHITECTURE_STACK_USAGE + 448)

// socket_plug_switch_create_task => osThreadNew
#define SOCKET_PLUG_SWITCH_CREATE_TASK_STACK_SIZE                        (SYSTEM_ARCHITECTURE_STACK_USAGE + 320)

// socket_plug_switch_task => wait_plug_switch_disconnected => _trace_log_append => log_append => queue_push => osThreadFlagsSet => osRtxPostProcess => osRtxErrorNotify => __ARM_common_switch8
#define SOCKET_PLUG_SWITCH_TASK_STACK_SIZE                               (SYSTEM_ARCHITECTURE_STACK_USAGE + 448)

// socket_proximity_create_task => osThreadNew
#define SOCKET_PROXIMITY_CREATE_TASK_STACK_SIZE                          (SYSTEM_ARCHITECTURE_STACK_USAGE + 320)

// socket_proximity_task => wait_proximity_disconnected => _trace_log_append => log_append => queue_push => osThreadFlagsSet => osRtxPostProcess => osRtxErrorNotify => __ARM_common_switch8
#define SOCKET_PROXIMITY_TASK_STACK_SIZE                                 (SYSTEM_ARCHITECTURE_STACK_USAGE + 448)

#endif
